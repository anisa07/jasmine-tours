---
/**
 * BlurImage Component
 *
 * Image component with blur-up placeholder (LQIP - Low-Quality Image Placeholder)
 * for better perceived performance. Shows a blurred placeholder while the high-quality
 * image loads, creating a smooth transition.
 *
 * @example
 * <BlurImage
 *   src={tourImage}
 *   alt="Amsterdam canal tour"
 *   placeholder="data:image/svg+xml,..."
 *   widths={[400, 800, 1200]}
 * />
 */

import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";

export interface Props {
  src: ImageMetadata;
  alt: string;
  placeholder?: string;
  widths?: number[];
  sizes?: string;
  formats?: ("avif" | "webp" | "jpeg" | "png")[];
  loading?: "lazy" | "eager";
  fetchpriority?: "high" | "low" | "auto";
  quality?: number;
  class?: string;
  wrapperClass?: string;
}

const {
  src,
  alt,
  placeholder,
  widths = [400, 800, 1200, 1600],
  sizes = "100vw",
  formats = ["avif", "webp"],
  loading = "lazy",
  fetchpriority = "auto",
  quality = 80,
  class: className = "",
  wrapperClass = "",
} = Astro.props;

// Generate a simple SVG placeholder if none provided
const defaultPlaceholder = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 400 300'%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='20'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' fill='%23f3f4f6'/%3E%3C/svg%3E`;

const placeholderSrc = placeholder || defaultPlaceholder;
---

<div class={`blur-image-wrapper relative overflow-hidden ${wrapperClass}`}>
  <!-- Blur placeholder -->
  <img
    src={placeholderSrc}
    alt=""
    aria-hidden="true"
    class="blur-placeholder absolute inset-0 w-full h-full blur-xl scale-110 transition-opacity duration-300"
  />

  <!-- Actual optimized image -->
  <Picture
    src={src}
    widths={widths}
    sizes={sizes}
    formats={formats}
    alt={alt}
    loading={loading}
    fetchpriority={fetchpriority}
    quality={quality}
    class={`blur-image relative z-10 opacity-0 transition-opacity duration-300 ${className}`}
    densities={[1, 2]}
  />
</div>

<script>
  // Fade in images when loaded
  document.addEventListener("DOMContentLoaded", () => {
    const images = document.querySelectorAll(
      ".blur-image-wrapper picture img.blur-image",
    );

    images.forEach((img) => {
      if (img instanceof HTMLImageElement) {
        // If already loaded
        if (img.complete) {
          img.classList.add("loaded");
          img.classList.remove("opacity-0");
          const placeholder = img
            .closest(".blur-image-wrapper")
            ?.querySelector(".blur-placeholder");
          if (placeholder) {
            placeholder.classList.add("opacity-0");
          }
        } else {
          // Wait for load
          img.addEventListener("load", () => {
            img.classList.add("loaded");
            img.classList.remove("opacity-0");
            const placeholder = img
              .closest(".blur-image-wrapper")
              ?.querySelector(".blur-placeholder");
            if (placeholder) {
              placeholder.classList.add("opacity-0");
            }
          });
        }
      }
    });
  });
</script>

<style>
  .blur-image-wrapper {
    background-color: #f3f4f6;
  }

  .blur-placeholder {
    filter: blur(20px);
    transform: scale(1.1);
  }

  .blur-image.loaded {
    opacity: 1 !important;
  }
</style>
