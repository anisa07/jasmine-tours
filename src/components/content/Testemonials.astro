---
import Container from "@/components/layout/Container.astro";
import { Image } from "astro:assets";
import { ChevronLeft, ChevronRight, X } from "@lucide/astro";
import type { ImageMetadata } from "astro";

// Type definitions
type Testimonial = {
  quote: string;
  tour: string;
  author: {
    name: string;
    avatar: ImageMetadata;
  };
  rating: number;
};

interface Props {
  t: (
    key: string,
    fallback: string,
    vars?: Record<string, string | number>
  ) => string;
  testimonials: Testimonial[];
}

const { t, testimonials } = Astro.props;

// Export review schemas for parent pages to use
export const generateReviewsSchema = (testimonials: Testimonial[]) => testimonials.map((testimonial) => ({
  "@context": "https://schema.org",
  "@type": "Review",
  "itemReviewed": {
    "@type": "TravelAgency",
    "name": "Jasmine Tours",
    "url": "https://jasmine-tours.nl"
  },
  "author": {
    "@type": "Person",
    "name": testimonial.author.name
  },
  "reviewRating": {
    "@type": "Rating",
    "ratingValue": testimonial.rating,
    "bestRating": 5,
    "worstRating": 1
  },
  "reviewBody": testimonial.quote
}));

// Function to truncate text to fit in card (approx 180 characters)
function truncateText(text: string, maxLength: number = 180): string {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength).trim() + '...';
}
---

<!-- Testimonials Section -->
<section class="py-20 bg-muted/30">
  <Container size="xl" padding="lg">
    <div class="text-center mb-16">
      <h2
        class="text-3xl md:text-4xl font-bold text-foreground mb-4 animate-fade-up"
      >
        Отзывы наших путешественников
      </h2>
      <p class="text-xl text-muted-foreground animate-fade-up animate-delay-1">
        Узнайте, что говорят наши довольные клиенты о своих незабываемых путешествиях
      </p>
    </div>

    <!-- Testimonials Grid Carousel -->
    <div class="relative">
      <!-- Carousel Container -->
      <div class="carousel-container overflow-hidden">
        <div class="carousel-track transition-transform duration-500 ease-out" data-carousel="testimonials">
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {
              testimonials.map((testimonial, index) => (
                <button
                  type="button"
                  class="testimonial-card bg-card rounded-2xl border shadow-sm hover:shadow-lg transition-all duration-300 overflow-hidden cursor-pointer text-left group hover:border-primary/40 aspect-square flex flex-col"
                  data-testimonial-index={index}
                  aria-label={`Read full review from ${testimonial.author.name}`}
                >
                  <div class="p-6 flex flex-col h-full">
                    <!-- Rating Stars -->
                    <div class="flex text-yellow-400 mb-4">
                      <span class="text-2xl">★★★★★</span>
                    </div>

                    <!-- Tour Name -->
                    <h3 class="text-lg font-semibold text-foreground mb-3 line-clamp-2">
                      {testimonial.tour}
                    </h3>

                    <!-- Truncated Quote -->
                    <blockquote class="text-muted-foreground leading-relaxed mb-4 flex-grow overflow-hidden text-sm">
                      <p class="line-clamp-6">
                        "{truncateText(testimonial.quote, 200)}"
                      </p>
                    </blockquote>

                    <!-- Author Info -->
                    <div class="flex items-center mt-auto pt-4 border-t border-border/50">
                      <div class="w-12 h-12 rounded-full overflow-hidden border-2 border-primary/20 flex-shrink-0">
                        <Image
                          src={testimonial.author.avatar}
                          alt={testimonial.author.name}
                          width={48}
                          height={48}
                          class="w-full h-full object-cover"
                          loading="lazy"
                        />
                      </div>
                      <div class="ml-3 min-w-0 flex-1">
                        <div class="font-semibold text-foreground text-sm truncate">
                          {testimonial.author.name}
                        </div>
                        <div class="text-xs text-primary group-hover:underline">
                          Читать полностью →
                        </div>
                      </div>
                    </div>
                  </div>
                </button>
              ))
            }
          </div>
        </div>
      </div>

      <!-- Navigation Controls -->
      <button
        type="button"
        class="carousel-prev absolute -left-4 top-1/2 transform -translate-y-1/2 bg-background/95 hover:bg-background rounded-full p-3 shadow-xl transition-all duration-200 z-10 border-2 border-border hover:border-primary disabled:opacity-50 disabled:cursor-not-allowed"
        data-carousel="testimonials"
        aria-label="Previous 3 testimonials"
      >
        <ChevronLeft size={24} class="text-foreground" aria-hidden="true" />
      </button>
      <button
        type="button"
        class="carousel-next absolute -right-4 top-1/2 transform -translate-y-1/2 bg-background/95 hover:bg-background rounded-full p-3 shadow-xl transition-all duration-200 z-10 border-2 border-border hover:border-primary disabled:opacity-50 disabled:cursor-not-allowed"
        data-carousel="testimonials"
        aria-label="Next 3 testimonials"
      >
        <ChevronRight size={24} class="text-foreground" aria-hidden="true" />
      </button>

      <!-- Dots Indicator -->
      <div class="flex justify-center mt-8 space-x-3">
        {
          Array.from({ length: Math.ceil(testimonials.length / 3) }).map((_, pageIndex) => (
            <button
              type="button"
              class={`carousel-dot w-3 h-3 rounded-full transition-all duration-200 ${
                pageIndex === 0 ? 'bg-primary w-8' : 'bg-muted-foreground/40 hover:bg-muted-foreground/60'
              }`}
              data-carousel="testimonials"
              data-page={pageIndex}
              aria-label={`Go to testimonials page ${pageIndex + 1}`}
            ></button>
          ))
        }
      </div>
    </div>
  </Container>
</section>

<!-- Modal for Full Review -->
<div
  id="testimonial-modal"
  class="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 hidden items-center justify-center p-4"
  role="dialog"
  aria-modal="true"
  aria-labelledby="modal-title"
>
  <div class="bg-background rounded-2xl max-w-3xl w-full max-h-[90vh] overflow-y-auto shadow-2xl border">
    <div class="sticky top-0 bg-background border-b border-border p-6 flex items-start justify-between">
      <div class="flex-1 pr-4">
        <h3 id="modal-title" class="text-2xl font-bold text-foreground mb-2"></h3>
        <div class="flex text-yellow-400">
          <span class="text-xl">★★★★★</span>
        </div>
      </div>
      <button
        type="button"
        id="close-modal"
        class="flex-shrink-0 p-2 hover:bg-muted rounded-full transition-colors"
        aria-label="Close modal"
      >
        <X size={24} class="text-muted-foreground" aria-hidden="true" />
      </button>
    </div>

    <div class="p-8">
      <!-- Full Quote -->
      <blockquote class="text-lg text-foreground leading-relaxed mb-8">
        <p id="modal-quote" class="italic"></p>
      </blockquote>

      <!-- Author Info -->
      <div class="flex items-center pt-6 border-t border-border">
        <img
          id="modal-avatar"
          src=""
          alt=""
          class="w-16 h-16 rounded-full border-2 border-primary/20 object-cover"
        />
        <div class="ml-4">
          <div id="modal-author" class="font-semibold text-foreground text-lg"></div>
          <div class="text-muted-foreground">Клиент Jasmine Tours</div>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline define:vars={{ testimonials }}>
  // Testimonials grid carousel functionality
  document.addEventListener("DOMContentLoaded", function () {
    const carouselTrack = document.querySelector('[data-carousel="testimonials"]');
    if (!carouselTrack) return;

    const testimonialCards = document.querySelectorAll('.testimonial-card');
    const totalTestimonials = testimonialCards.length;
    const itemsPerPage = 3;
    const totalPages = Math.ceil(totalTestimonials / itemsPerPage);
    
    let currentPage = 0;
    
    const dots = document.querySelectorAll('[data-carousel="testimonials"][data-page]');
    const prevBtn = document.querySelector('.carousel-prev[data-carousel="testimonials"]');
    const nextBtn = document.querySelector('.carousel-next[data-carousel="testimonials"]');
    const modal = document.getElementById('testimonial-modal');
    const closeModalBtn = document.getElementById('close-modal');

    // Show/hide cards based on current page
    function updateCarousel() {
      let startIndex = currentPage * itemsPerPage;
      let endIndex = startIndex + itemsPerPage;

      // If we're on the last page and there are fewer than itemsPerPage items remaining,
      // show the last itemsPerPage items instead
      if (endIndex > totalTestimonials) {
        endIndex = totalTestimonials;
        startIndex = Math.max(0, totalTestimonials - itemsPerPage);
      }

      testimonialCards.forEach((card, index) => {
        if (index >= startIndex && index < endIndex) {
          card.style.display = 'flex';
        } else {
          card.style.display = 'none';
        }
      });

      updateDots();
      updateNavigationButtons();
    }

    // Update dots indicators
    function updateDots() {
      dots.forEach((dot, index) => {
        if (index === currentPage) {
          dot.classList.remove('bg-muted-foreground/40', 'w-3');
          dot.classList.add('bg-primary', 'w-8');
        } else {
          dot.classList.remove('bg-primary', 'w-8');
          dot.classList.add('bg-muted-foreground/40', 'w-3');
        }
      });
    }

    // Update navigation button states
    function updateNavigationButtons() {
      if (prevBtn) {
        prevBtn.disabled = currentPage === 0;
      }
      if (nextBtn) {
        nextBtn.disabled = currentPage === totalPages - 1;
      }
    }

    // Navigate to next page (3 cards)
    function nextPage() {
      if (currentPage < totalPages - 1) {
        currentPage++;
        updateCarousel();
      }
    }

    // Navigate to previous page (3 cards)
    function prevPage() {
      if (currentPage > 0) {
        currentPage--;
        updateCarousel();
      }
    }

    // Go to specific page
    function goToPage(pageIndex) {
      if (pageIndex >= 0 && pageIndex < totalPages) {
        currentPage = pageIndex;
        updateCarousel();
      }
    }

    // Open modal with full review
    function openModal(index) {
      const testimonial = testimonials[index];
      if (!testimonial || !modal) return;

      // Populate modal content
      const modalTitle = document.getElementById('modal-title');
      const modalQuote = document.getElementById('modal-quote');
      const modalAuthor = document.getElementById('modal-author');
      const modalAvatar = document.getElementById('modal-avatar');

      if (modalTitle) modalTitle.textContent = testimonial.tour;
      if (modalQuote) modalQuote.textContent = `"${testimonial.quote}"`;
      if (modalAuthor) modalAuthor.textContent = testimonial.author.name;
      
      // Handle avatar - get the src from the image element
      const cardAvatar = testimonialCards[index].querySelector('img');
      if (modalAvatar && cardAvatar) {
        modalAvatar.src = cardAvatar.src;
        modalAvatar.alt = testimonial.author.name;
      }

      // Show modal
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      document.body.style.overflow = 'hidden';
    }

    // Close modal
    function closeModal() {
      if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = '';
      }
    }

    // Event listeners for navigation
    if (nextBtn) {
      nextBtn.addEventListener('click', nextPage);
    }

    if (prevBtn) {
      prevBtn.addEventListener('click', prevPage);
    }

    // Dot navigation
    dots.forEach((dot) => {
      dot.addEventListener('click', function() {
        const pageIndex = parseInt(this.getAttribute('data-page'), 10);
        goToPage(pageIndex);
      });
    });

    // Card click to open modal
    testimonialCards.forEach((card) => {
      card.addEventListener('click', function() {
        const index = parseInt(this.getAttribute('data-testimonial-index'), 10);
        openModal(index);
      });

      // Add keyboard support
      card.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          const index = parseInt(this.getAttribute('data-testimonial-index'), 10);
          openModal(index);
        }
      });
    });

    // Close modal events
    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', closeModal);
    }

    if (modal) {
      // Close on backdrop click
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          closeModal();
        }
      });

      // Close on Escape key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
          closeModal();
        }
      });
    }

    // Initialize carousel
    updateCarousel();
  });
</script>
