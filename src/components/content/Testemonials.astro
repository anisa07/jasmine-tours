---
import Container from "@/components/layout/Container.astro";
import { Image } from "astro:assets";
import { ChevronLeft, ChevronRight } from "@lucide/astro";
import type { ImageType } from "@/types";

// Type definitions
type Testimonial = {
  quote: string;
  tour: string;
  author: {
    name: string;
    avatar: ImageType;
  };
  rating: number;
};

interface Props {
  t: (
    key: string,
    fallback: string,
    vars?: Record<string, string | number>
  ) => string;
  testimonials: Testimonial[];
}

const { t, testimonials } = Astro.props;

// Generate Schema.org Review markup
const reviewsSchema = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  "itemListElement": testimonials.map((testimonial, index) => ({
    "@type": "Review",
    "position": index + 1,
    "author": {
      "@type": "Person",
      "name": testimonial.author.name
    },
    "reviewRating": {
      "@type": "Rating",
      "ratingValue": testimonial.rating,
      "bestRating": 5,
      "worstRating": 1
    },
    "reviewBody": testimonial.quote,
    "itemReviewed": {
      "@type": "TouristAttraction",
      "name": testimonial.tour,
      "provider": {
        "@type": "LocalBusiness",
        "name": "Jasmine Tours"
      }
    }
  }))
};
---

<!-- Schema.org Review Markup -->
<script type="application/ld+json" set:html={JSON.stringify(reviewsSchema)} />

<!-- Testimonials Section -->
<section class="py-20 bg-muted/30">
  <Container size="xl" padding="lg">
    <div class="text-center mb-16">
      <h2
        class="text-3xl md:text-4xl font-bold text-foreground mb-4 animate-fade-up"
      >
        Отзывы наших путешественников
      </h2>
      <p class="text-xl text-muted-foreground animate-fade-up animate-delay-1">
        Узнайте, что говорят наши довольные клиенты о своих незабываемых путешествиях
      </p>
    </div>

    <!-- Testimonials Carousel -->
    <div class="relative">
      <!-- Carousel Container -->
      <div class="carousel-container overflow-hidden min-h-[350px] md:min-h-[280px]">
        <div class="carousel-track flex transition-transform duration-500 ease-in-out" data-carousel="testimonials">
          {
            testimonials.map((testimonial, index) => (
              <div class="carousel-slide flex-none w-full min-h-[350px] md:min-h-[280px]">
                <div class="bg-card rounded-2xl border shadow-sm overflow-hidden mx-2 md:mx-4 h-full">
                  <div class="flex flex-col md:flex-row md:items-center h-full p-4 md:p-8 gap-3 md:gap-4">
                    <!-- Profile Image - Small Round Avatar -->
                    <div class="hidden md:flex justify-start mb-4">
                      <div class="w-28 h-28 rounded-full overflow-hidden border-2 border-primary/20 flex-shrink-0">
                        <Image
                          src={testimonial.author.avatar}
                          alt={testimonial.author.name}
                          width={112}
                          height={112}
                          class="w-full h-full object-cover"
                          loading="lazy"
                        />
                      </div>
                    </div>
                    
                    <!-- Content -->
                    <div class="flex-1 flex flex-col justify-between text-center md:text-left">
                      <div>
                        <!-- Quote Icon -->
                        <div class="mb-3 md:mb-4 hidden md:flex justify-center md:justify-start">
                          <svg class="w-5 h-5 md:w-6 md:h-6 text-primary/30" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M14.017 21v-7.391c0-5.704 3.731-9.57 8.983-10.609l.995 2.151c-2.432.917-3.995 3.638-3.995 5.849h4v10h-10zm-14.017 0v-7.391c0-5.704 3.748-9.57 9-10.609l.996 2.151c-2.433.917-3.996 3.638-3.996 5.849h4v10h-10z"/>
                          </svg>
                        </div>
                        
                        <!-- Quote Text -->
                        <blockquote class="text-base md:text-base text-muted-foreground leading-relaxed mb-3 md:mb-4 italic px-2 md:px-0">
                          "{testimonial.quote}"
                        </blockquote>
                      </div>
                      
                      <!-- Author Info -->
                      <div class="flex flex-col items-center md:items-start mt-auto">
                        <div class="font-semibold text-foreground text-base md:text-lg mb-1">
                          {testimonial.author.name}
                        </div>
                        <div class="text-muted-foreground text-sm mb-2">
                          {testimonial.tour}
                        </div>
                        
                        <!-- Rating -->
                        <div class="flex text-yellow-400 justify-center md:justify-start">
                          <span class="text-base md:text-lg">★★★★★</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>

      <!-- Navigation Controls -->
      <button
        class="carousel-prev absolute left-4 top-1/2 transform -translate-y-1/2 bg-background/90 hover:bg-background rounded-full p-3 shadow-lg transition-all duration-200 z-10 border"
        data-carousel="testimonials"
        aria-label="Previous testimonial"
      >
        <ChevronLeft size={24} class="text-foreground" aria-hidden="true" />
      </button>
      <button
        class="carousel-next absolute right-4 top-1/2 transform -translate-y-1/2 bg-background/90 hover:bg-background rounded-full p-3 shadow-lg transition-all duration-200 z-10 border"
        data-carousel="testimonials"
        aria-label="Next testimonial"
      >
        <ChevronRight size={24} class="text-foreground" aria-hidden="true" />
      </button>

      <!-- Dots Indicator -->
      <div class="flex justify-center mt-8 space-x-3">
        {
          testimonials.map((_, index) => (
            <button
              class={`carousel-dot w-3 h-3 rounded-full transition-all duration-200 ${
                index === 0 ? 'bg-primary' : 'bg-muted-foreground/40 hover:bg-muted-foreground/60'
              }`}
              data-carousel="testimonials"
              data-slide={index}
              aria-label={`Go to testimonial ${index + 1}`}
            ></button>
          ))
        }
      </div>
    </div>
  </Container>
</section>

<script is:inline>
  // Testimonials carousel functionality
  document.addEventListener("DOMContentLoaded", function () {
    const carouselContainer = document.querySelector('[data-carousel="testimonials"]');
    if (!carouselContainer) return;

    let currentSlide = 0;
    const slides = carouselContainer.querySelectorAll('.carousel-slide');
    const totalSlides = slides.length;
    const dots = document.querySelectorAll('[data-carousel="testimonials"][data-slide]');
    const prevBtn = document.querySelector('.carousel-prev[data-carousel="testimonials"]');
    const nextBtn = document.querySelector('.carousel-next[data-carousel="testimonials"]');
    const carouselWrapper = carouselContainer.closest('.carousel-container');

    // Set consistent height based on tallest slide
    function setCarouselHeight() {
      let maxHeight = 0;
      slides.forEach(slide => {
        // Temporarily show slide to measure its natural height
        slide.style.height = 'auto';
        slide.style.position = 'static';
        slide.style.visibility = 'visible';
        const slideHeight = slide.offsetHeight;
        maxHeight = Math.max(maxHeight, slideHeight);
        slide.style.position = '';
        slide.style.visibility = '';
      });
      
      // Set consistent height for all slides based on the tallest one
      const finalHeight = Math.max(maxHeight, 350); // Minimum 350px
      carouselWrapper.style.height = `${finalHeight}px`;
      slides.forEach(slide => {
        slide.style.height = `${finalHeight}px`;
      });
    }

    // Update carousel position
    function updateCarousel() {
      const translateX = -(currentSlide * 100);
      carouselContainer.style.transform = `translateX(${translateX}%)`;
      updateDots();
    }

    // Update dots indicators
    function updateDots() {
      dots.forEach((dot, index) => {
        if (index === currentSlide) {
          dot.classList.remove('bg-muted-foreground/40');
          dot.classList.add('bg-primary');
        } else {
          dot.classList.remove('bg-primary');
          dot.classList.add('bg-muted-foreground/40');
        }
      });
    }

    // Navigate to next slide
    function nextSlide() {
      currentSlide = (currentSlide + 1) % totalSlides;
      updateCarousel();
    }

    // Navigate to previous slide
    function prevSlide() {
      currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
      updateCarousel();
    }

    // Go to specific slide
    function goToSlide(slideIndex) {
      currentSlide = slideIndex;
      updateCarousel();
    }

    // Event listeners
    if (nextBtn) {
      nextBtn.addEventListener('click', nextSlide);
    }

    if (prevBtn) {
      prevBtn.addEventListener('click', prevSlide);
    }

    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => goToSlide(index));
    });

    // Auto-play carousel (optional)
    let autoplayInterval;
    function startAutoplay() {
      autoplayInterval = setInterval(nextSlide, 5000); // Change slide every 5 seconds
    }

    function stopAutoplay() {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
      }
    }

    // Start autoplay
    startAutoplay();

    // Pause autoplay on hover
    const carouselSection = carouselContainer.closest('section');
    if (carouselSection) {
      carouselSection.addEventListener('mouseenter', stopAutoplay);
      carouselSection.addEventListener('mouseleave', startAutoplay);
    }

    // Initialize carousel
    setCarouselHeight();
    updateCarousel();
    
    // Recalculate height on window resize
    window.addEventListener('resize', setCarouselHeight);
  });
</script>
