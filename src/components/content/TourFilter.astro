---
import Container from "@/components/layout/Container.astro";
import TourFilterCard from "@/components/content/TourFilterCard.astro";
import type { ImageMetadata } from "astro";
import WhatsAppIcon from "@/assets/images/svg/whatsapp.svg?raw";
import FacebookIcon from "@/assets/images/svg/facebook.svg?raw";
import TwitterIcon from "@/assets/images/svg/twitter.svg?raw";
import InstagramIcon from "@/assets/images/svg/instagram.svg?raw";
import WhatsAppContactIcon from "@/assets/images/svg/whatsapp-contact.svg?raw";
import { X, ChevronLeft, ChevronRight, MessageCircle } from "@lucide/astro";

// Type definitions
type Tour = {
  title: string;
  price: string;
  duration: string;
  image: ImageMetadata;
  alt: string;
  slug?: string;
  description?: string;
};

type TourCategory = {
  id: string;
  title: string;
  tours: Tour[];
};

type TourCategories = TourCategory[];

interface Props {
  t: (
    key: string,
    fallback: string,
    vars?: Record<string, string | number>
  ) => string;
  tourCategories: TourCategories;
  locale?: string;
}

const { t, tourCategories: rawTourCategories, locale = "ru" } = Astro.props;

// Apply translations to tour categories
const tourCategories = rawTourCategories.map(category => ({
  ...category,
  title: t(`tours.filters.${category.id}`, category.title)
}));
---

<!-- Tour Filter Panel Section -->
<section class="py-16 bg-card/50 border-y">
  <Container size="xl" padding="lg">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-foreground mb-4">
        {t("tours.section_title", "Познакомьтесь с нашими турами")}
      </h2>
      <p class="text-lg text-muted-foreground max-w-2xl mx-auto">
        {t("tours.section_description", "Откройте удивительные впечатления с нашими тщательно продуманными туристическими программами")}
      </p>
    </div>

    <!-- Filter Tabs -->
    <div class="flex flex-wrap justify-center gap-2 mb-8">
      {tourCategories.map((category, index) => (
        <button
          type="button"
          class={`tour-filter-tab rounded-full font-semibold ${
            index === 0 
              ? 'btn-primary active' 
              : 'btn-outline'
          }`}
          data-filter={category.id}
        >
          {category.title}
        </button>
      ))}
    </div>

    <!-- Tour Content Area -->
    <div class="tour-content-area relative">
      <!-- Unified Tours Grid (for both categories and search) -->
      <div id="unified-tours-container" class="mb-8">
        <h3 id="tours-section-title" class="text-xl font-semibold text-foreground mb-4 hidden">Search Results</h3>
        <div id="unified-tours-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- Tours from categories or search results will be shown here -->
        </div>
      </div>

      <!-- Original category containers (now hidden, used as data source) -->
      <div id="category-containers" class="hidden">
      {tourCategories.map((category, categoryIndex) => (
        <div 
          id={`${category.id}-tours`} 
          class={`tour-content ${categoryIndex === 0 ? 'active' : 'hidden'}`}
        >
          <!-- Tours Grid -->
          <div 
            class="tours-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"
            data-category={category.id}
          >
            {category.tours.map((tour, tourIndex) => (
              <div 
                class={`tour-card ${tourIndex >= 3 ? 'hidden' : ''}`}
                data-tour-index={tourIndex}
              >
                <TourFilterCard
                  title={tour.title}
                  price={tour.price}
                  duration={tour.duration}
                  image={tour.image}
                  alt={tour.alt}
                  tourSlug={tour.slug}
                  locale={locale}
                  description={tour.description}
                />
              </div>
            ))}
          </div>

          <!-- More Tours Button -->
          {category.tours.length > 3 && (
            <div class="text-center">
              <button
                type="button"
                class="more-tours-btn btn-primary rounded-full font-semibold"
                data-category={category.id}
              >
{t("tours.show_more", "Показать больше туров")} ({category.tours.length - 3})
              </button>
              <button
                type="button"
                class="less-tours-btn hidden px-8 py-3 bg-muted text-muted-foreground rounded-full font-semibold hover:bg-muted/80 transition-all duration-200 shadow-md hover:shadow-lg ml-4"
                data-category={category.id}
              >
{t("tours.show_less", "Показать меньше")}
              </button>
            </div>
          )}
        </div>
      ))}
      </div>
    </div>
  </Container>

  <!-- Tour Details Modal -->
  <div id="tourModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 hidden items-center justify-center p-4 opacity-0 transition-opacity duration-300">
    <div class="relative flex items-center justify-center w-full max-w-5xl">
      <!-- Previous Button - Desktop/Tablet (left side) -->
      <button type="button" id="prevTourBtn" class="tour-nav-btn tour-nav-btn-left hidden sm:flex" aria-label="Previous tour">
        <ChevronLeft class="w-6 h-6" aria-hidden="true" />
      </button>

      <div class="bg-background rounded-3xl w-full max-h-[90vh] overflow-hidden flex flex-col shadow-2xl transform transition-all duration-300">
        <!-- Modal Header with Gradient Background -->
        <div class="relative bg-gradient-to-br from-primary/10 via-primary/5 to-accent/10 border-b border-border/50 flex-shrink-0">
          <div class="p-6 sm:p-8">
            <div class="flex items-start justify-between gap-4">
              <div class="flex-1">
                <h2 id="modalTitle" class="text-2xl sm:text-3xl font-bold text-foreground leading-tight" aria-live="polite"></h2>
              </div>
              <button type="button" id="closeModal" class="p-2 hover:bg-background/80 rounded-full transition-all duration-200 hover:scale-110 hover:rotate-90 flex-shrink-0" aria-label="Close modal">
                <X class="w-6 h-6" aria-hidden="true" />
              </button>
            </div>
          </div>
        </div>
      
        <!-- Modal Content - Scrollable Area -->
        <div class="overflow-y-auto flex-1 p-6 sm:p-8">
          <!-- Price and Duration Cards -->
          <div class="grid sm:grid-cols-2 gap-4 mb-8">
            <!-- Price Card -->
            <div class="relative overflow-hidden rounded-2xl bg-gradient-to-br from-primary/10 to-primary/5 border border-primary/20 p-6">
              <div class="absolute top-0 right-0 w-32 h-32 bg-primary/5 rounded-full blur-3xl"></div>
              <div class="relative">
                <div class="text-sm font-medium text-muted-foreground mb-2">{t("modal.price_label", "Стоимость")}</div>
                <div id="modalPrice" class="text-3xl sm:text-4xl font-bold text-primary mb-1"></div>
                <div class="text-xs text-muted-foreground">{t("modal.price_suffix", "за тур")}</div>
              </div>
            </div>
            
            <!-- Duration Card -->
            <div class="relative overflow-hidden rounded-2xl bg-gradient-to-br from-accent/10 to-accent/5 border border-accent/20 p-6">
              <div class="absolute top-0 right-0 w-32 h-32 bg-accent/5 rounded-full blur-3xl"></div>
              <div class="relative">
                <div class="text-sm font-medium text-muted-foreground mb-2">{t("modal.duration_label", "Продолжительность")}</div>
                <div id="modalDuration" class="text-2xl sm:text-3xl font-bold text-foreground mb-1"></div>
                <div class="text-xs text-muted-foreground">{t("modal.duration_suffix", "время тура")}</div>
              </div>
            </div>
          </div>
          
          <!-- Description with elegant styling -->
          <div class="mb-8">
            <div class="h-1 w-16 bg-gradient-to-r from-primary to-accent rounded-full mb-6"></div>
            <div id="modalDescription" class="prose prose-base max-w-none modal-content text-foreground/90 leading-relaxed"></div>
          </div>
        </div>
        
        <!-- Contact Button and Share Links - Fixed at bottom with gradient -->
        <div class="flex-shrink-0 p-6 sm:p-8 border-t border-border/50 bg-gradient-to-t from-muted/30 to-transparent">
          <!-- Desktop/Tablet Layout: Single Row -->
          <div class="hidden sm:flex items-center gap-4">
            <!-- Main CTA Button -->
            <a 
              id="tour-modal-whatsapp"
              href="https://wa.me/c/31642221525" 
              target="_blank"
              class="btn-primary flex-1 justify-center text-base py-4"
              rel="noopener noreferrer"
            >
              <div class="w-6 h-6" set:html={WhatsAppContactIcon} />
              {t("modal.contact_whatsapp", "Связаться через WhatsApp")}
            </a>
            
            <!-- Share Buttons Group -->
            <div class="flex gap-2 items-center">
              <!-- WhatsApp Share -->
              <button 
                type="button"
                class="share-btn share-whatsapp"
                aria-label="Share on WhatsApp"
                title={t('modal.share_whatsapp', 'Поделиться в WhatsApp')}
              >
                <span class="share-icon" set:html={WhatsAppIcon} />
              </button>
              
              <!-- Facebook Share -->
              <button 
                type="button"
                class="share-btn share-facebook"
                aria-label="Share on Facebook"
                title={t('modal.share_facebook', 'Поделиться в Facebook')}
              >
                <span class="share-icon" set:html={FacebookIcon} />
              </button>
              
              <!-- X (Twitter) Share -->
              <button 
                type="button"
                class="share-btn share-twitter"
                aria-label="Share on X (Twitter)"
                title={t('modal.share_twitter', 'Поделиться в X')}
              >
                <span class="share-icon" set:html={TwitterIcon} />
              </button>
              
              <!-- Instagram (Copy Link) -->
              <button 
                type="button"
                class="share-btn share-instagram"
                aria-label="Copy link to share on Instagram"
                title={t('modal.share_instagram', 'Скопировать ссылку')}
              >
                <span class="share-icon" set:html={InstagramIcon} />
              </button>
            </div>
          </div>
          
          <!-- Mobile Layout: Stacked -->
          <div class="sm:hidden">
            <!-- Main CTA Button -->
            <div class="mb-4">
              <a 
                id="tour-modal-whatsapp-mobile"
                href="https://wa.me/c/31642221525" 
                target="_blank"
                class="btn-primary w-full justify-center text-base py-4"
                rel="noopener noreferrer"
              >
                <div class="w-6 h-6" set:html={WhatsAppContactIcon} />
                Связаться через WhatsApp
              </a>
            </div>
            
            <!-- Share Buttons with Mobile Navigation -->
            <div class="flex gap-2 items-center justify-center">
              <!-- Mobile Navigation - Previous -->
              <button type="button" id="prevTourBtnMobile" class="tour-nav-btn-mobile" aria-label="Previous tour">
                <ChevronLeft class="w-5 h-5" />
              </button>

              <!-- WhatsApp Share -->
              <button 
                type="button"
                class="share-btn share-whatsapp"
                aria-label="Share on WhatsApp"
                title={t('modal.share_whatsapp', 'Поделиться в WhatsApp')}
              >
                <span class="share-icon" set:html={WhatsAppIcon} />
              </button>
              
              <!-- Facebook Share -->
              <button 
                type="button"
                class="share-btn share-facebook"
                aria-label="Share on Facebook"
                title={t('modal.share_facebook', 'Поделиться в Facebook')}
              >
                <span class="share-icon" set:html={FacebookIcon} />
              </button>
              
              <!-- X (Twitter) Share -->
              <button 
                type="button"
                class="share-btn share-twitter"
                aria-label="Share on X (Twitter)"
                title={t('modal.share_twitter', 'Поделиться в X')}
              >
                <span class="share-icon" set:html={TwitterIcon} />
              </button>
              
              <!-- Instagram (Copy Link) -->
              <button 
                type="button"
                class="share-btn share-instagram"
                aria-label="Copy link to share on Instagram"
                title={t('modal.share_instagram', 'Скопировать ссылку')}
              >
                <span class="share-icon" set:html={InstagramIcon} />
              </button>

              <!-- Mobile Navigation - Next -->
              <button type="button" id="nextTourBtnMobile" class="tour-nav-btn-mobile" aria-label="Next tour">
                <ChevronRight class="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Next Button - Desktop/Tablet (right side) -->
      <button type="button" id="nextTourBtn" class="tour-nav-btn tour-nav-btn-right hidden sm:flex" aria-label="Next tour">
        <ChevronRight class="w-6 h-6" aria-hidden="true" />
      </button>
    </div>
  </div>
</section>

<style>
    .tour-card {
        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
    }
    .tour-card.hidden {
        display: none;
    }
    .tour-card.showing {
        animation: fadeInUp 0.5s ease-out forwards;
    }
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* Modal specific styles for build version */
    #tourModal {
        overflow-y: auto !important;
    }
    
    #tourModal .bg-background {
        max-height: 90vh !important;
        overflow: hidden !important;
        display: flex !important;
        flex-direction: column !important;
    }
    
    #tourModal .overflow-y-auto {
        overflow-y: auto !important;
        flex: 1 !important;
        min-height: 0 !important;
        -webkit-overflow-scrolling: touch;
    }
    
    /* Tour Modal Animations */
    #tourModal.show {
        opacity: 1;
    }
    
    #tourModal .bg-background {
        animation: modalSlideUp 0.3s ease-out;
    }
    
    @keyframes modalSlideUp {
        from {
            opacity: 0;
            transform: translateY(20px) scale(0.95);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }
    
    /* Modal content styling */
    .modal-content h2 {
        font-size: 1.375rem;
        font-weight: 700;
        margin-top: 1.5rem;
        margin-bottom: 0.75rem;
        color: hsl(var(--foreground));
        line-height: 1.4;
    }
    .modal-content h2:first-child {
        margin-top: 0;
    }
    .modal-content h3 {
        font-size: 1.125rem;
        font-weight: 600;
        margin-top: 1.25rem;
        margin-bottom: 0.5rem;
        color: hsl(var(--foreground));
        line-height: 1.5;
    }
    .modal-content p {
        margin-bottom: 1rem;
        font-size: 1rem;
        color: hsl(var(--foreground));
        opacity: 0.9;
        line-height: 1.75;
    }
    .modal-content ul {
        margin-bottom: 1rem;
        margin-top: 0.5rem;
        padding-left: 1.5rem;
    }
    .modal-content li {
        font-size: 1rem;
        color: hsl(var(--foreground));
        opacity: 0.85;
        line-height: 1.75;
        margin-bottom: 0.5rem;
        position: relative;
    }
    .modal-content li::marker {
        color: hsl(var(--primary));
    }
    .modal-content strong {
        font-weight: 700;
        font-size: 1rem;
        color: hsl(var(--foreground));
    }
    .modal-content em {
        font-style: italic;
        font-size: 1rem;
        color: hsl(var(--primary));
    }
    
    /* Share buttons styling */
    .share-btn {
        width: 48px;
        height: 48px;
        min-width: 48px;
        min-height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 0.5rem;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        cursor: pointer;
        border: none;
    }
    
    .share-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
    }
    
    .share-btn:active {
        transform: scale(0.95);
    }
    
    .share-icon {
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .share-icon :global(svg) {
        width: 100%;
        height: 100%;
        fill: white;
        stroke: white;
    }
    
    /* Individual button colors */
    .share-whatsapp {
        background-color: #25D366;
    }
    
    .share-whatsapp:hover {
        background-color: #20BA5A;
    }
    
    .share-facebook {
        background-color: #1877F2;
    }
    
    .share-facebook:hover {
        background-color: #166FE5;
    }
    
    .share-twitter {
        background-color: #000000;
    }
    
    .share-twitter:hover {
        background-color: #1a1a1a;
    }
    
    .share-instagram {
        background: linear-gradient(135deg, #833AB4 0%, #E1306C 50%, #F56040 100%);
    }
    
    .share-instagram:hover {
        opacity: 0.9;
    }
    
    /* Tour navigation buttons - Desktop/Tablet (hidden on mobile) */
    .tour-nav-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: hsl(var(--background));
        border: 2px solid hsl(var(--border));
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        z-index: 10;
    }
    
    .tour-nav-btn:hover {
        background-color: hsl(var(--muted));
        transform: translateY(-50%) scale(1.1);
        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1);
    }
    
    .tour-nav-btn:active {
        transform: translateY(-50%) scale(0.95);
    }
    
    .tour-nav-btn-left {
        left: -25px;
    }
    
    .tour-nav-btn-right {
        right: -25px;
    }
    
    .tour-nav-btn :global(svg) {
        color: hsl(var(--foreground));
    }
    
    /* Hide desktop/tablet navigation on mobile */
    @media (max-width: 640px) {
        .tour-nav-btn {
            display: none;
        }
    }
    
    /* Mobile navigation buttons - Inline with share buttons (mobile only) */
    .tour-nav-btn-mobile {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: hsl(var(--background));
        border: 2px solid hsl(var(--border));
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        flex-shrink: 0;
    }
    
    .tour-nav-btn-mobile:hover {
        background-color: hsl(var(--muted));
        transform: scale(1.1);
        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1);
    }
    
    .tour-nav-btn-mobile:active {
        transform: scale(0.95);
    }
    
    .tour-nav-btn-mobile :global(svg) {
        color: hsl(var(--foreground));
    }
    
    /* Hide mobile navigation buttons on desktop/tablet */
    @media (min-width: 640px) {
        .tour-nav-btn-mobile {
            display: none;
        }
    }
    
    /* Share button animations */
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
</style>

<script is:inline define:vars={{ 
  translations: {
    priceOnRequest: t("modal.price_on_request", "По запросу"),
    noDescription: t("modal.no_description", "Описание скоро будет добавлено."),
    linkCopied: t("modal.link_copied", "Ссылка скопирована!"),
    linkCopiedTitle: t("modal.link_copied", "Ссылка скопирована!"),
    copyFailed: t("modal.copy_failed", "Не удалось скопировать ссылку"),
    copyLinkPrompt: t("modal.copy_link_prompt", "Скопируйте ссылку:")
  }
}}>
  // Tour filter tab functionality + Grid expand/collapse functionality
  document.addEventListener("DOMContentLoaded", function () {
    const filterTabs = document.querySelectorAll(".tour-filter-tab");
    const tourContents = document.querySelectorAll(".tour-content");

    // Grid expansion states for each category
    const gridStates = {};
    document.querySelectorAll('#category-containers [data-category]').forEach((grid) => {
      const category = grid.getAttribute('data-category');
      gridStates[category] = { expanded: false };
    });

    function switchTab(targetFilter) {
      // Exit search mode
      isSearchMode = false;
      
      // Hide search results title
      const sectionTitle = document.getElementById('tours-section-title');
      if (sectionTitle) {
        sectionTitle.classList.add('hidden');
      }
      
      // Remove active class from all tabs and switch to outline style
      for (let i = 0; i < filterTabs.length; i++) {
        const tab = filterTabs[i];
        tab.classList.remove("active", "btn-primary");
        tab.classList.add("btn-outline");
      }

      // Add active class to clicked tab and switch to primary style
      const activeTab = document.querySelector(
        '[data-filter="' + targetFilter + '"]'
      );
      if (activeTab) {
        activeTab.classList.add("active");
        activeTab.classList.remove("btn-outline");
        activeTab.classList.add("btn-primary");
      }

      // Get category tours from hidden container
      const categoryGrid = document.querySelector(`#category-containers [data-category="${targetFilter}"]`);
      const unifiedGrid = document.getElementById('unified-tours-grid');
      
      if (categoryGrid && unifiedGrid) {
        const categoryTours = categoryGrid.querySelectorAll('.tour-card');
        
        // Clear unified grid
        unifiedGrid.innerHTML = '';
        
        // Add category tours to unified grid (respecting show more/less state)
        categoryTours.forEach((card, index) => {
          const cardClone = card.cloneNode(true);
          cardClone.style.display = '';
          cardClone.style.border = '';
          cardClone.style.transform = '';
          cardClone.classList.remove('search-highlight', 'exact-match', 'partial-match', 'search-hidden');
          
          // Show only first 3 cards if not expanded
          if (index >= 3 && !gridStates[targetFilter].expanded) {
            cardClone.classList.add('hidden');
          } else {
            cardClone.classList.remove('hidden');
          }
          
          unifiedGrid.appendChild(cardClone);
        });
        
        // Update the original content for grid states tracking
        const activeContent = document.getElementById(targetFilter + "-tours");
        if (activeContent) {
          activeContent.classList.add("active");
          activeContent.classList.remove("hidden");
        }
      }
    }

    function expandGrid(category) {
      const grid = document.querySelector(`#category-containers [data-category="${category}"]`);
      const moreBtn = document.querySelector(`.more-tours-btn[data-category="${category}"]`);
      const lessBtn = document.querySelector(`.less-tours-btn[data-category="${category}"]`);
      
      if (grid) {
        const hiddenCards = grid.querySelectorAll('.tour-card.hidden');
        
        hiddenCards.forEach((card, index) => {
          setTimeout(() => {
            card.classList.remove('hidden');
            card.classList.add('showing');
          }, index * 100); // Staggered animation
        });
        
        if (moreBtn) moreBtn.style.display = 'none';
        if (lessBtn) lessBtn.style.display = 'inline-block';
        
        gridStates[category].expanded = true;
        
        // Refresh unified grid display
        setTimeout(() => {
          if (!isSearchMode) {
            switchTab(category);
          }
        }, hiddenCards.length * 100);
      }
    }

    function collapseGrid(category) {
      const grid = document.querySelector(`#category-containers [data-category="${category}"]`);
      const moreBtn = document.querySelector(`.more-tours-btn[data-category="${category}"]`);
      const lessBtn = document.querySelector(`.less-tours-btn[data-category="${category}"]`);
      
      if (grid) {
        const allCards = grid.querySelectorAll('.tour-card');
        
        allCards.forEach((card, index) => {
          if (index >= 3) {
            card.classList.remove('showing');
            card.classList.add('hidden');
          }
        });
        
        if (moreBtn) moreBtn.style.display = 'inline-block';
        if (lessBtn) lessBtn.style.display = 'none';
        
        gridStates[category].expanded = false;
        
        // Refresh unified grid display
        if (!isSearchMode) {
          switchTab(category);
        }
      }
    }

    // Add click event listeners to all tabs
    for (let i = 0; i < filterTabs.length; i++) {
      const tab = filterTabs[i];
      tab.addEventListener("click", function () {
        const filter = tab.getAttribute("data-filter");
        if (filter) {
          switchTab(filter);
        }
      });
    }

    // Add grid expansion and modal event listeners
    document.addEventListener("click", function (e) {
      // More tours button
      if (e.target.closest(".more-tours-btn")) {
        const category = e.target.closest(".more-tours-btn").getAttribute("data-category");
        expandGrid(category);
      }

      // Less tours button
      if (e.target.closest(".less-tours-btn")) {
        const category = e.target.closest(".less-tours-btn").getAttribute("data-category");
        collapseGrid(category);
      }

      // Tour details button
      if (e.target.closest(".tour-details-btn")) {
        const btn = e.target.closest(".tour-details-btn");
        const tourCard = btn.closest(".tour-card");
        
        // Get all visible tour cards from the unified grid
        const unifiedGrid = document.getElementById('unified-tours-grid');
        const visibleTourCards = unifiedGrid ? Array.from(unifiedGrid.querySelectorAll('.tour-card:not(.hidden)')) : [tourCard];
        
        // Find the index of the current tour
        const tourIndex = visibleTourCards.indexOf(tourCard);
        
        // Build array of all visible tours data
        const toursData = visibleTourCards.map(card => {
          const detailsBtn = card.querySelector('.tour-details-btn');
          return {
            title: detailsBtn.getAttribute("data-tour-title"),
            price: detailsBtn.getAttribute("data-tour-price"),
            duration: detailsBtn.getAttribute("data-tour-duration"),
            description: detailsBtn.getAttribute("data-tour-description"),
            image: detailsBtn.getAttribute("data-tour-image"),
            alt: detailsBtn.getAttribute("data-tour-alt")
          };
        });
        
        // Open modal with current tour and navigation context
        openTourModal(toursData[tourIndex], tourIndex, toursData);
      }

      // Close modal button
      if (e.target.closest("#closeModal")) {
        closeTourModal();
      }

      // Close modal on backdrop click
      if (e.target.id === "tourModal") {
        closeTourModal();
      }
    });

    // Enhanced search functionality
    const popularSearches = [
      'амстердам', 'канал', 'лодка', 'музей', 'групповой', 'индивидуальный',
      'сыр', 'мельниц', 'тюльпан', 'дегустация', 'качели'
    ];

    // Fuzzy matching function
    function fuzzyMatch(searchTerm, text) {
      const words = searchTerm.toLowerCase().split(' ').filter(word => word.length > 0);
      const textLower = text.toLowerCase();
      
      // Check if all words are present (in any order)
      return words.every(word => textLower.includes(word));
    }

    // Search ranking function
    function calculateSearchScore(searchTerm, card) {
      const titleElement = card.querySelector('h3, .font-semibold');
      const title = titleElement?.textContent?.toLowerCase() || '';
      
      // Get description from data attribute on the details button
      const detailsBtn = card.querySelector('.tour-details-btn');
      const description = detailsBtn?.getAttribute('data-tour-description')?.toLowerCase() || '';
      const price = detailsBtn?.getAttribute('data-tour-price')?.toLowerCase() || '';
      const duration = detailsBtn?.getAttribute('data-tour-duration')?.toLowerCase() || '';
      
      let score = 0;
      const searchLower = searchTerm.toLowerCase();
      
      // Exact title match gets highest score
      if (title.includes(searchLower)) score += 10;
      
      // Title starts with search term gets bonus
      if (title.startsWith(searchLower)) score += 5;
      
      // Description match gets lower score
      if (description.includes(searchLower)) score += 3;
      
      // Price and duration matches
      if (price.includes(searchLower)) score += 2;
      if (duration.includes(searchLower)) score += 2;
      
      // Fuzzy matching bonus
      if (fuzzyMatch(searchTerm, title)) score += 1;
      if (fuzzyMatch(searchTerm, description)) score += 1;
      
      return score;
    }

    // Generate smart suggestions for no results
    function generateSmartSuggestions(searchTerm) {
      const suggestions = [];
      const searchLower = searchTerm.toLowerCase();
      
      // Check for common typos and partial matches
      if (searchLower.includes('амстер') || searchLower.includes('amsterd')) {
        suggestions.push('Попробуйте "амстердам"');
      }
      if (searchLower.includes('канал') || searchLower.includes('canal')) {
        suggestions.push('Попробуйте "канал"');
      }
      
      // Suggest related terms
      if (searchLower.includes('лодк') || searchLower.includes('boat')) {
        suggestions.push('Попробуйте "лодка" или "канал"');
      }
      if (searchLower.includes('музе') || searchLower.includes('museum')) {
        suggestions.push('Попробуйте "музей" или "фотосессия"');
      }
      if (searchLower.includes('сыр') || searchLower.includes('cheese')) {
        suggestions.push('Попробуйте "сыр", "дегустация" или "мельниц"');
      }
      
      // Show available categories
      suggestions.push('Просмотрите по категориям: Популярные туры, Амстердам, Прогулки на лодках');
      
      // Show popular searches
      const matchingPopular = popularSearches.filter(term => 
        term.includes(searchLower) && term !== searchLower
      );
      if (matchingPopular.length > 0) {
        suggestions.push(`Популярные запросы: ${matchingPopular.slice(0, 3).join(', ')}`);
      }
      
      return suggestions;
    }

    // Track whether we're in search mode
    let isSearchMode = false;
    
    // Display tours in unified grid
    function displayToursInUnifiedGrid(tours, isSearch = false) {
      const unifiedGrid = document.getElementById('unified-tours-grid');
      const sectionTitle = document.getElementById('tours-section-title');
      
      // Clear previous content
      unifiedGrid.innerHTML = '';
      
      // Show/hide section title
      if (isSearch) {
        sectionTitle.textContent = 'Search Results';
        sectionTitle.classList.remove('hidden');
      } else {
        sectionTitle.classList.add('hidden');
      }
      
      // Add tours to unified grid
      tours.forEach(card => {
        const cardClone = card.cloneNode(true);
        cardClone.style.display = '';
        unifiedGrid.appendChild(cardClone);
      });
    }
    
    // Clear search and restore category view
    function clearSearchResults() {
      isSearchMode = false;
      const activeTab = document.querySelector('.tour-filter-tab.active');
      const activeFilter = activeTab?.getAttribute('data-filter') || 'popular';
      
      // Show active category tours
      switchTab(activeFilter);
      
      // Show all "Show more/less" buttons again
      document.querySelectorAll('.more-tours-btn, .less-tours-btn').forEach(btn => {
        btn.style.display = '';
      });
    }

    // Global search function that can be called from Hero component
    window.searchTours = function(searchTerm) {
      if (!searchTerm || searchTerm.trim().length < 2) {
        clearSearchResults();
        return;
      }

      isSearchMode = true;
      let foundResults = false;
      const searchResults = [];
      const unifiedGrid = document.getElementById('unified-tours-grid');
      const sectionTitle = document.getElementById('tours-section-title');

      // Search through ALL tours in ALL categories
      document.querySelectorAll('#category-containers [data-category]').forEach((grid) => {
        const category = grid.getAttribute('data-category');
        const categoryTours = grid.querySelectorAll('.tour-card');

        categoryTours.forEach((card) => {
          const score = calculateSearchScore(searchTerm, card);
          
          if (score > 0) {
            foundResults = true;
            searchResults.push({ card, score, category });
          }
        });
      });

      // Hide all "Show more/less" buttons during search
      document.querySelectorAll('.more-tours-btn, .less-tours-btn').forEach(btn => {
        btn.style.display = 'none';
      });

      if (foundResults) {
        // Sort results by score (highest first)
        searchResults.sort((a, b) => b.score - a.score);

        // Show section title
        sectionTitle.textContent = 'Search Results';
        sectionTitle.classList.remove('hidden');
        
        // Clear unified grid
        unifiedGrid.innerHTML = '';

        // Add matching cards to unified grid
        searchResults.forEach((result) => {
          const cardClone = result.card.cloneNode(true);
          cardClone.classList.add('search-highlight');
          cardClone.style.display = '';
          
          // Different highlight for exact matches vs partial matches
          if (result.score >= 10) {
            cardClone.classList.add('exact-match');
            cardClone.style.border = '2px solid rgb(34, 197, 94)'; // green for exact matches
          } else if (result.score >= 5) {
            cardClone.classList.add('partial-match');
            cardClone.style.border = '2px solid rgb(59, 130, 246)'; // blue for partial matches
          } else {
            cardClone.style.border = '2px solid rgb(168, 85, 247)'; // purple for fuzzy matches
          }
          
          cardClone.style.transform = 'scale(1.02)';
          cardClone.style.transition = 'all 0.3s ease';
          
          // Add to unified grid
          unifiedGrid.appendChild(cardClone);
          
          // Remove highlight after 3 seconds
          setTimeout(() => {
            cardClone.style.border = '';
            cardClone.style.transform = '';
            cardClone.classList.remove('exact-match', 'partial-match');
          }, 3000);
        });
      } else {
        // No results found - show all tours instead
        sectionTitle.classList.add('hidden');
        unifiedGrid.innerHTML = '';
        
        // Collect all tours from all categories
        const allToursArray = [];
        document.querySelectorAll('#category-containers [data-category]').forEach((grid) => {
          const categoryTours = grid.querySelectorAll('.tour-card');
          categoryTours.forEach(card => {
            allToursArray.push(card);
          });
        });
        
        // Display all tours in unified grid
        allToursArray.forEach((card, index) => {
          const cardClone = card.cloneNode(true);
          cardClone.style.display = '';
          cardClone.style.border = '';
          cardClone.style.transform = '';
          cardClone.classList.remove('search-highlight', 'exact-match', 'partial-match', 'search-hidden', 'hidden');
          unifiedGrid.appendChild(cardClone);
        });
        
        // Hide all "Show more/less" buttons
        document.querySelectorAll('.more-tours-btn, .less-tours-btn').forEach(btn => {
          btn.style.display = 'none';
        });
      }
    };

    // Clear search function
    window.clearSearch = function() {
      clearSearchResults();
    };
    
    // Initialize unified grid with first category on page load
    const firstTab = document.querySelector('.tour-filter-tab.active');
    if (firstTab) {
      const firstCategory = firstTab.getAttribute('data-filter');
      switchTab(firstCategory);
    }

    // Modal functions
    let currentTourData = null; // Store current tour data for sharing
    let allTours = []; // Store all tours in current category
    let currentTourIndex = 0; // Current tour index
    
    function openTourModal(tourData, tourIndex = 0, tours = []) {
      currentTourData = tourData; // Save tour data for sharing
      currentTourIndex = tourIndex;
      allTours = tours;
      
      const modal = document.getElementById("tourModal");
      const modalTitle = document.getElementById("modalTitle");
      const modalPrice = document.getElementById("modalPrice");
      const modalDuration = document.getElementById("modalDuration");
      const modalDescription = document.getElementById("modalDescription");
      const scrollableArea = modal?.querySelector(".overflow-y-auto");
      
      // Update navigation buttons state
      updateNavigationButtons();

      if (modal && modalTitle && modalPrice && modalDuration && modalDescription) {
        modalTitle.textContent = tourData.title;
        modalPrice.textContent = tourData.price || translations.priceOnRequest;
        modalDuration.textContent = tourData.duration;
        
        // Convert markdown to HTML (enhanced conversion with better spacing)
        let htmlDescription = tourData.description || translations.noDescription;
        
        // Clean up extra whitespace first
        htmlDescription = htmlDescription.replace(/\n\s+/g, '\n').trim();
        
        // Enhanced markdown conversion
        htmlDescription = htmlDescription
          // Headers
          .replace(/^## (.*$)/gim, '<h2>$1</h2>')
          .replace(/^### (.*$)/gim, '<h3>$1</h3>')
          // Bold text patterns - handle both **text** and **text:**
          .replace(/\*\*([^*]+?):\*\*/g, '<strong>$1:</strong>')
          .replace(/\*\*([^*]+?)\*\*/g, '<strong>$1</strong>')
          // List items
          .replace(/^- (.*$)/gim, '<li>$1</li>')
          .replace(/^\* (.*$)/gim, '<li>$1</li>')
          // Convert double line breaks to paragraph breaks
          .replace(/\n\n+/g, '</p><p>')
          // Convert single line breaks to br tags
          .replace(/\n/g, '<br>');
        
        // Wrap consecutive list items in ul tags
        htmlDescription = htmlDescription.replace(/(<li>.*?<\/li>)(\s*<br>\s*<li>.*?<\/li>)*/gs, function(match) {
          return '<ul>' + match.replace(/<br>\s*/g, '') + '</ul>';
        });
        
        // Clean up any remaining breaks after closing tags
        htmlDescription = htmlDescription.replace(/<\/(h[23]|ul)><br>/g, '</$1>');
        
        // Wrap content in paragraphs if needed
        if (!htmlDescription.startsWith('<h2>') && !htmlDescription.startsWith('<h3>') && !htmlDescription.startsWith('<ul>')) {
          htmlDescription = '<p>' + htmlDescription + '</p>';
        } else {
          // Add p tags around text that follows headers but isn't in lists
          htmlDescription = htmlDescription.replace(/(<\/h[23]>)\s*([^<].*?)(?=<h[23]>|<ul>|$)/gs, '$1<p>$2</p>');
        }
        
        // Final cleanup - remove excessive breaks and empty paragraphs
        htmlDescription = htmlDescription
          .replace(/<br>\s*<\/p>/g, '</p>')
          .replace(/<p>\s*<br>/g, '<p>')
          .replace(/<p>\s*<\/p>/g, '')
          .replace(/(<\/ul>)\s*<br>/g, '$1');
        
        modalDescription.innerHTML = htmlDescription;
        
        // Reset scroll position to top before showing modal
        if (scrollableArea) {
          scrollableArea.scrollTop = 0;
        }
        
        modal.classList.remove("hidden");
        modal.classList.add("flex");
        document.body.style.overflow = "hidden";
        
        // Trigger fade-in animation
        requestAnimationFrame(() => {
          modal.classList.add("show");
        });
      }
    }

    function closeTourModal() {
      const modal = document.getElementById("tourModal");
      if (modal) {
        // Fade out animation
        modal.classList.remove("show");
        
        // Wait for animation to complete before hiding
        setTimeout(() => {
          modal.classList.add("hidden");
          modal.classList.remove("flex");
          document.body.style.overflow = "auto";
        }, 300);
      }
    }

    // Navigation functions
    function updateNavigationButtons() {
      // No need to disable buttons since we're wrapping around
      // Buttons are always enabled when there's more than 1 tour
    }

    function navigateToTour(direction) {
      if (allTours.length <= 1) return; // No navigation if only 1 tour
      
      let newIndex;
      if (direction === 'prev') {
        // Wrap to last tour if at first tour
        newIndex = currentTourIndex === 0 ? allTours.length - 1 : currentTourIndex - 1;
      } else {
        // Wrap to first tour if at last tour
        newIndex = currentTourIndex === allTours.length - 1 ? 0 : currentTourIndex + 1;
      }
      
      const newTourData = allTours[newIndex];
      openTourModal(newTourData, newIndex, allTours);
    }

    // Navigation button event listeners
    document.addEventListener("click", function(e) {
      if (e.target.closest("#prevTourBtn") || e.target.closest("#prevTourBtnMobile")) {
        navigateToTour('prev');
      }
      if (e.target.closest("#nextTourBtn") || e.target.closest("#nextTourBtnMobile")) {
        navigateToTour('next');
      }
    });

    // Close modal on escape key, navigate with arrow keys
    document.addEventListener("keydown", function(e) {
      if (e.key === "Escape") {
        closeTourModal();
      }
      if (e.key === "ArrowLeft") {
        navigateToTour('prev');
      }
      if (e.key === "ArrowRight") {
        navigateToTour('next');
      }
    });
    
    // Share button functionality
    function getShareUrl() {
      return window.location.href;
    }
    
    function getShareText() {
      if (!currentTourData) return '';
      return `${currentTourData.title} - ${currentTourData.price} | Jasmine Tours`;
    }
    
    // Add event listeners for share buttons
    document.addEventListener("click", function(e) {
      const shareBtn = e.target.closest(".share-btn");
      if (!shareBtn || !currentTourData) return;
      
      const url = getShareUrl();
      const text = getShareText();
      const encodedText = encodeURIComponent(text);
      const encodedUrl = encodeURIComponent(url);
      
      if (shareBtn.classList.contains("share-whatsapp")) {
        // WhatsApp share
        const whatsappUrl = `https://wa.me/?text=${encodedText}%20${encodedUrl}`;
        window.open(whatsappUrl, "_blank");
      } else if (shareBtn.classList.contains("share-facebook")) {
        // Facebook share
        const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`;
        window.open(facebookUrl, "_blank", "width=600,height=400");
      } else if (shareBtn.classList.contains("share-twitter")) {
        // Twitter/X share
        const twitterUrl = `https://twitter.com/intent/tweet?text=${encodedText}&url=${encodedUrl}`;
        window.open(twitterUrl, "_blank", "width=600,height=400");
      } else if (shareBtn.classList.contains("share-instagram")) {
        // Instagram - copy link to clipboard
        if (navigator.clipboard && navigator.clipboard.writeText) {
          navigator.clipboard.writeText(url).then(() => {
            // Show a temporary success message
            const originalTitle = shareBtn.getAttribute("title");
            shareBtn.setAttribute("title", translations.linkCopiedTitle);
            
            // Create a tooltip-like notification
            const notification = document.createElement("div");
            notification.textContent = translations.linkCopied;
            notification.style.cssText = "position: fixed; bottom: 100px; right: 24px; background: hsl(var(--primary)); color: hsl(var(--primary-foreground)); padding: 12px 20px; border-radius: 8px; font-size: 14px; font-weight: 500; z-index: 100; box-shadow: 0 4px 6px rgba(0,0,0,0.1); animation: slideIn 0.3s ease-out;";
            document.body.appendChild(notification);
            
            // Remove notification after 2 seconds
            setTimeout(() => {
              notification.style.animation = "slideOut 0.3s ease-in";
              setTimeout(() => {
                document.body.removeChild(notification);
                shareBtn.setAttribute("title", originalTitle);
              }, 300);
            }, 2000);
          }).catch(() => {
            alert(translations.copyFailed);
          });
        } else {
          // Fallback for older browsers
          alert(translations.copyLinkPrompt + " " + url);
        }
      }
    });
  });
</script>
