---
import Container from "@/components/layout/Container.astro";
import TourFilterCard from "@/components/content/TourFilterCard.astro";
import type { ImageType } from "@/types";

// Type definitions
type Tour = {
  title: string;
  price: string;
  duration: string;
  image: ImageType;
  alt: string;
  slug?: string;
  description?: string;
};

type TourCategory = {
  id: string;
  title: string;
  tours: Tour[];
};

type TourCategories = TourCategory[];

interface Props {
  t: (
    key: string,
    fallback: string,
    vars?: Record<string, string | number>
  ) => string;
  tourCategories: TourCategories;
  locale?: string;
}

const { t, tourCategories: rawTourCategories, locale = "ru" } = Astro.props;

// Apply translations to tour categories
const tourCategories = rawTourCategories.map(category => ({
  ...category,
  title: t(`tours.filters.${category.id}`, category.title)
}));
---

<!-- Tour Filter Panel Section -->
<section class="py-16 bg-card/50 border-y">
  <Container size="xl" padding="lg">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-foreground mb-4">
        Познакомьтесь с нашими турами
      </h2>
      <p class="text-lg text-muted-foreground max-w-2xl mx-auto">
        Откройте удивительные впечатления с нашими тщательно продуманными туристическими программами
      </p>
    </div>

    <!-- Filter Tabs -->
    <div class="flex flex-wrap justify-center gap-2 mb-8">
      {tourCategories.map((category, index) => (
        <button
          class={`tour-filter-tab px-6 py-3 rounded-full border-2 font-semibold transition-all duration-200 hover:shadow-md ${
            index === 0 
              ? 'active border-primary bg-primary text-primary-foreground' 
              : 'border-border bg-background text-foreground hover:border-primary hover:text-primary'
          }`}
          data-filter={category.id}
        >
          {category.title}
        </button>
      ))}
    </div>

    <!-- Tour Content Area -->
    <div class="tour-content-area">
      {tourCategories.map((category, categoryIndex) => (
        <div 
          id={`${category.id}-tours`} 
          class={`tour-content ${categoryIndex === 0 ? 'active' : 'hidden'}`}
        >
          <!-- Tours Grid -->
          <div 
            class="tours-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"
            data-category={category.id}
          >
            {category.tours.map((tour, tourIndex) => (
              <div 
                class={`tour-card ${tourIndex >= 3 ? 'hidden' : ''}`}
                data-tour-index={tourIndex}
              >
                <TourFilterCard
                  title={tour.title}
                  price={tour.price}
                  duration={tour.duration}
                  image={tour.image}
                  alt={tour.alt}
                  tourSlug={tour.slug}
                  locale={locale}
                  description={tour.description}
                />
              </div>
            ))}
          </div>

          <!-- More Tours Button -->
          {category.tours.length > 3 && (
            <div class="text-center">
              <button
                class="more-tours-btn px-8 py-3 bg-primary text-primary-foreground rounded-full font-semibold hover:bg-primary/90 transition-all duration-200 shadow-md hover:shadow-lg"
                data-category={category.id}
              >
                Показать больше туров ({category.tours.length - 3})
              </button>
              <button
                class="less-tours-btn hidden px-8 py-3 bg-muted text-muted-foreground rounded-full font-semibold hover:bg-muted/80 transition-all duration-200 shadow-md hover:shadow-lg ml-4"
                data-category={category.id}
              >
                Показать меньше
              </button>
            </div>
          )}
        </div>
      ))}
    </div>
  </Container>

  <!-- Tour Details Modal -->
  <div id="tourModal" class="fixed inset-0 bg-black/50 z-50 hidden items-center justify-center p-4">
    <div class="bg-background rounded-2xl max-w-4xl w-full max-h-[90vh] flex flex-col shadow-2xl">
      <!-- Modal Header -->
      <div class="flex items-center justify-between p-6 border-b border-border flex-shrink-0">
        <h2 id="modalTitle" class="text-2xl font-bold text-foreground"></h2>
        <button id="closeModal" class="p-2 hover:bg-muted rounded-full transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Modal Content -->
      <div class="flex-1 min-h-0 flex flex-col">
        <!-- Content Section with proper scrolling -->
        <div class="flex-1 overflow-y-auto p-6">
          <!-- Price and Duration -->
          <div class="flex items-center justify-between mb-6 p-4 bg-muted/50 rounded-lg">
            <div>
              <div id="modalPrice" class="text-2xl font-bold text-primary"></div>
              <div class="text-sm text-muted-foreground">за тур</div>
            </div>
            <div>
              <div id="modalDuration" class="text-lg font-semibold"></div>
              <div class="text-sm text-muted-foreground">продолжительность</div>
            </div>
          </div>
          
          <!-- Description -->
          <div id="modalDescription" class="prose prose-sm max-w-none modal-content mb-6"></div>
        </div>
        
        <!-- Contact Button - Fixed at bottom -->
        <div class="flex-shrink-0 p-6 pt-0 border-t border-border">
          <a 
            href="https://wa.me/c/31642221525" 
            target="_blank"
            class="w-full py-3 px-6 bg-primary text-primary-foreground rounded-lg font-semibold hover:bg-primary/90 transition-colors flex items-center justify-center gap-2"
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.119"/>
            </svg>
            Связаться через WhatsApp
          </a>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
    .tour-card {
        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
    }
    .tour-card.hidden {
        display: none;
    }
    .tour-card.showing {
        animation: fadeInUp 0.5s ease-out forwards;
    }
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* Modal content styling */
    .modal-content h2 {
        font-size: 1.25rem;
        font-weight: 700;
        margin-top: 1.25rem;
        margin-bottom: 0.5rem;
        color: hsl(var(--foreground));
    }
    .modal-content h2:first-child {
        margin-top: 0;
    }
    .modal-content h3 {
        font-size: 1.125rem;
        font-weight: 600;
        margin-top: 1rem;
        margin-bottom: 0.25rem;
        color: hsl(var(--foreground));
    }
    .modal-content p {
        margin-bottom: 0.75rem;
        font-size: 1rem;
        color: hsl(var(--muted-foreground));
        line-height: 1.625;
    }
    .modal-content ul {
        margin-bottom: 0.75rem;
        margin-top: 0.25rem;
    }
    .modal-content li {
        font-size: 1rem;
        color: hsl(var(--muted-foreground));
        line-height: 1.625;
        margin-bottom: 0.25rem;
    }
    .modal-content strong {
        font-weight: 600;
        font-size: 1rem;
        color: hsl(var(--foreground));
    }
    .modal-content em {
        font-style: italic;
        font-size: 1rem;
    }
</style>

<script is:inline>
  // Tour filter tab functionality + Grid expand/collapse functionality
  document.addEventListener("DOMContentLoaded", function () {
    const filterTabs = document.querySelectorAll(".tour-filter-tab");
    const tourContents = document.querySelectorAll(".tour-content");

    // Grid expansion states for each category
    const gridStates = {};
    document.querySelectorAll('[data-category]').forEach((grid) => {
      const category = grid.getAttribute('data-category');
      gridStates[category] = { expanded: false };
    });

    function switchTab(targetFilter) {
      // Remove active class from all tabs
      for (let i = 0; i < filterTabs.length; i++) {
        const tab = filterTabs[i];
        tab.classList.remove("active");
        tab.classList.remove(
          "border-primary",
          "bg-primary",
          "text-primary-foreground"
        );
        tab.classList.add("border-border", "bg-background", "text-foreground");
      }

      // Hide all tour content
      for (let i = 0; i < tourContents.length; i++) {
        const content = tourContents[i];
        content.classList.remove("active");
        content.classList.add("hidden");
      }

      // Add active class to clicked tab
      const activeTab = document.querySelector(
        '[data-filter="' + targetFilter + '"]'
      );
      if (activeTab) {
        activeTab.classList.add("active");
        activeTab.classList.remove(
          "border-border",
          "bg-background",
          "text-foreground"
        );
        activeTab.classList.add(
          "border-primary",
          "bg-primary",
          "text-primary-foreground"
        );
      }

      // Show corresponding content
      const activeContent = document.getElementById(targetFilter + "-tours");
      if (activeContent) {
        activeContent.classList.add("active");
        activeContent.classList.remove("hidden");
        
        // Reset grid state when switching tabs
        if (gridStates[targetFilter] && gridStates[targetFilter].expanded) {
          collapseGrid(targetFilter);
        }
      }
    }

    function expandGrid(category) {
      const grid = document.querySelector(`[data-category="${category}"]`);
      const moreBtn = document.querySelector(`.more-tours-btn[data-category="${category}"]`);
      const lessBtn = document.querySelector(`.less-tours-btn[data-category="${category}"]`);
      
      if (grid) {
        const hiddenCards = grid.querySelectorAll('.tour-card.hidden');
        
        hiddenCards.forEach((card, index) => {
          setTimeout(() => {
            card.classList.remove('hidden');
            card.classList.add('showing');
          }, index * 100); // Staggered animation
        });
        
        if (moreBtn) moreBtn.style.display = 'none';
        if (lessBtn) lessBtn.style.display = 'inline-block';
        
        gridStates[category].expanded = true;
      }
    }

    function collapseGrid(category) {
      const grid = document.querySelector(`[data-category="${category}"]`);
      const moreBtn = document.querySelector(`.more-tours-btn[data-category="${category}"]`);
      const lessBtn = document.querySelector(`.less-tours-btn[data-category="${category}"]`);
      
      if (grid) {
        const allCards = grid.querySelectorAll('.tour-card');
        
        allCards.forEach((card, index) => {
          if (index >= 3) {
            card.classList.remove('showing');
            card.classList.add('hidden');
          }
        });
        
        if (moreBtn) moreBtn.style.display = 'inline-block';
        if (lessBtn) lessBtn.style.display = 'none';
        
        gridStates[category].expanded = false;
      }
    }

    // Add click event listeners to all tabs
    for (let i = 0; i < filterTabs.length; i++) {
      const tab = filterTabs[i];
      tab.addEventListener("click", function () {
        const filter = tab.getAttribute("data-filter");
        if (filter) {
          switchTab(filter);
        }
      });
    }

    // Add grid expansion and modal event listeners
    document.addEventListener("click", function (e) {
      // More tours button
      if (e.target.closest(".more-tours-btn")) {
        const category = e.target.closest(".more-tours-btn").getAttribute("data-category");
        expandGrid(category);
      }

      // Less tours button
      if (e.target.closest(".less-tours-btn")) {
        const category = e.target.closest(".less-tours-btn").getAttribute("data-category");
        collapseGrid(category);
      }

      // Tour details button
      if (e.target.closest(".tour-details-btn")) {
        const btn = e.target.closest(".tour-details-btn");
        openTourModal({
          title: btn.getAttribute("data-tour-title"),
          price: btn.getAttribute("data-tour-price"),
          duration: btn.getAttribute("data-tour-duration"),
          description: btn.getAttribute("data-tour-description"),
          image: btn.getAttribute("data-tour-image"),
          alt: btn.getAttribute("data-tour-alt")
        });
      }

      // Close modal button
      if (e.target.closest("#closeModal")) {
        closeTourModal();
      }

      // Close modal on backdrop click
      if (e.target.id === "tourModal") {
        closeTourModal();
      }
    });

    // Global search function that can be called from Hero component
    window.searchTours = function(searchTerm) {
      let foundResults = false;
      let matchingCategory = null;

      // Search through all tours in all categories
      document.querySelectorAll('[data-category]').forEach((grid) => {
        const category = grid.getAttribute('data-category');
        const categoryTours = grid.querySelectorAll('.tour-card');
        let hasMatchInCategory = false;

        categoryTours.forEach((card) => {
          // Look for tour title in the card
          const titleElement = card.querySelector('h3, .font-semibold');
          const title = titleElement?.textContent?.toLowerCase() || '';
          
          if (title.includes(searchTerm)) {
            hasMatchInCategory = true;
            foundResults = true;
            // Highlight the card
            card.style.border = '2px solid rgb(59, 130, 246)'; // primary color
            card.style.transform = 'scale(1.02)';
            card.style.transition = 'all 0.3s ease';
            setTimeout(() => {
              card.style.border = '';
              card.style.transform = '';
            }, 2000);
          }
        });

        if (hasMatchInCategory && !matchingCategory) {
          matchingCategory = category;
        }
      });

      // Switch to the category with matches
      if (matchingCategory) {
        switchTab(matchingCategory);
        
        // Expand the grid to show all tours if collapsed
        if (!gridStates[matchingCategory].expanded) {
          setTimeout(() => {
            expandGrid(matchingCategory);
          }, 300);
        }
      }

      // Show no results message if nothing found
      if (!foundResults) {
        // Create or show no results message
        let noResultsMsg = document.getElementById('no-search-results');
        if (!noResultsMsg) {
          noResultsMsg = document.createElement('div');
          noResultsMsg.id = 'no-search-results';
          noResultsMsg.className = 'text-center py-8 text-muted-foreground';
          noResultsMsg.innerHTML = `<p class="text-lg">No tours found for "${searchTerm}". Try searching for destinations like "Amsterdam", "Labuan Bajo", or activities like "boat", "mountain".</p>`;
          
          const tourContentArea = document.querySelector('.tour-content-area');
          if (tourContentArea) {
            tourContentArea.appendChild(noResultsMsg);
          }
        } else {
          noResultsMsg.innerHTML = `<p class="text-lg">No tours found for "${searchTerm}". Try searching for destinations like "Amsterdam", "Labuan Bajo", or activities like "boat", "mountain".</p>`;
          noResultsMsg.style.display = 'block';
        }
        
        // Hide the message after 3 seconds
        setTimeout(() => {
          if (noResultsMsg) {
            noResultsMsg.style.display = 'none';
          }
        }, 3000);
      } else {
        // Hide no results message if it exists
        const noResultsMsg = document.getElementById('no-search-results');
        if (noResultsMsg) {
          noResultsMsg.style.display = 'none';
        }
      }
    };

    // Modal functions
    function openTourModal(tourData) {
      const modal = document.getElementById("tourModal");
      const modalTitle = document.getElementById("modalTitle");
      const modalPrice = document.getElementById("modalPrice");
      const modalDuration = document.getElementById("modalDuration");
      const modalDescription = document.getElementById("modalDescription");

      if (modal && modalTitle && modalPrice && modalDuration && modalDescription) {
        modalTitle.textContent = tourData.title;
        modalPrice.textContent = tourData.price || "По запросу";
        modalDuration.textContent = tourData.duration;
        
        // Convert markdown to HTML (enhanced conversion with better spacing)
        let htmlDescription = tourData.description || "Описание скоро будет добавлено.";
        
        // Clean up extra whitespace first
        htmlDescription = htmlDescription.replace(/\n\s+/g, '\n').trim();
        
        // Enhanced markdown conversion
        htmlDescription = htmlDescription
          // Headers
          .replace(/^## (.*$)/gim, '<h2>$1</h2>')
          .replace(/^### (.*$)/gim, '<h3>$1</h3>')
          // Bold text patterns - handle both **text** and **text:**
          .replace(/\*\*([^*]+?):\*\*/g, '<strong>$1:</strong>')
          .replace(/\*\*([^*]+?)\*\*/g, '<strong>$1</strong>')
          // List items
          .replace(/^- (.*$)/gim, '<li>$1</li>')
          .replace(/^\* (.*$)/gim, '<li>$1</li>')
          // Convert double line breaks to paragraph breaks
          .replace(/\n\n+/g, '</p><p>')
          // Convert single line breaks to br tags
          .replace(/\n/g, '<br>');
        
        // Wrap consecutive list items in ul tags
        htmlDescription = htmlDescription.replace(/(<li>.*?<\/li>)(\s*<br>\s*<li>.*?<\/li>)*/gs, function(match) {
          return '<ul>' + match.replace(/<br>\s*/g, '') + '</ul>';
        });
        
        // Clean up any remaining breaks after closing tags
        htmlDescription = htmlDescription.replace(/<\/(h[23]|ul)><br>/g, '</$1>');
        
        // Wrap content in paragraphs if needed
        if (!htmlDescription.startsWith('<h2>') && !htmlDescription.startsWith('<h3>') && !htmlDescription.startsWith('<ul>')) {
          htmlDescription = '<p>' + htmlDescription + '</p>';
        } else {
          // Add p tags around text that follows headers but isn't in lists
          htmlDescription = htmlDescription.replace(/(<\/h[23]>)\s*([^<].*?)(?=<h[23]>|<ul>|$)/gs, '$1<p>$2</p>');
        }
        
        // Final cleanup - remove excessive breaks and empty paragraphs
        htmlDescription = htmlDescription
          .replace(/<br>\s*<\/p>/g, '</p>')
          .replace(/<p>\s*<br>/g, '<p>')
          .replace(/<p>\s*<\/p>/g, '')
          .replace(/(<\/ul>)\s*<br>/g, '$1');
        
        modalDescription.innerHTML = htmlDescription;
        
        modal.classList.remove("hidden");
        modal.classList.add("flex");
        document.body.style.overflow = "hidden";
      }
    }

    function closeTourModal() {
      const modal = document.getElementById("tourModal");
      if (modal) {
        modal.classList.add("hidden");
        modal.classList.remove("flex");
        document.body.style.overflow = "auto";
      }
    }

    // Close modal on escape key
    document.addEventListener("keydown", function(e) {
      if (e.key === "Escape") {
        closeTourModal();
      }
    });
  });
</script>
